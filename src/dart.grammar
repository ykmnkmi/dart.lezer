@top LibraryDeclaration {
  expression
}

expression {
  literal
}

literal[@isGroup=Literal] {
  NullLiteral |
  BoolLiteral |
  NumericLiteral |
  StringLiteral
}

NullLiteral {
  'null'
}

BoolLiteral {
  'true' | 'false'
}

NumericLiteral {
  DIGIT+ ('.' DIGIT+)? EXPONENT? |
  '.' DIGIT+ EXPONENT? |
  '0x' HEX_DIGIT+ |
  '0X' HEX_DIGIT+
}

StringLiteral {
  (SingleLineString | MultiLineString)+
}

SingleLineString {
  RAW_SINGLE_LINE_STRING |
  SINGLE_LINE_STRING_SQ_BEGIN_END |
  SINGLE_LINE_STRING_SQ_BEGIN_MID expression (SINGLE_LINE_STRING_SQ_MID_MID expression)* SINGLE_LINE_STRING_SQ_MID_END |
  SINGLE_LINE_STRING_DQ_BEGIN_END |
  SINGLE_LINE_STRING_DQ_BEGIN_MID expression (SINGLE_LINE_STRING_DQ_MID_MID expression)* SINGLE_LINE_STRING_DQ_MID_END
}

MultiLineString {
  RAW_MULTI_LINE_STRING |
  MULTI_LINE_STRING_SQ_BEGIN_END |
  MULTI_LINE_STRING_SQ_BEGIN_MID expression (MULTI_LINE_STRING_SQ_MID_MID expression)* MULTI_LINE_STRING_SQ_MID_END |
  MULTI_LINE_STRING_DQ_BEGIN_END |
  MULTI_LINE_STRING_DQ_BEGIN_MID expression (MULTI_LINE_STRING_DQ_MID_MID expression)* MULTI_LINE_STRING_DQ_MID_END
}

@tokens {
  WHITESPACE {
    ('\t' | ' ' | '\r' | '\n'| '\r\n')+
  }

  DIGIT {
    $[0-9]
  }

  LETTER {
    $[a-zA-Z]
  }

  HEX_DIGIT {
    $[0-9a-fA-F]
  }

  EXPONENT {
    $[eE] $[+-]? DIGIT+
  }

  RAW_SINGLE_LINE_STRING {
    'r' "'" (!['\r\n])* "'" |
    'r' '"' (!['\r\n])* '"'
  }

  ESCAPE_SEQUENCE {
    '\n' | '\r' | '\f' | '\b' | '\t' | '\v' |
    '\x' HEX_DIGIT HEX_DIGIT |
    '\u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT |
    '\u{' HEX_DIGIT HEX_DIGIT? HEX_DIGIT? HEX_DIGIT? HEX_DIGIT? HEX_DIGIT? '}'
  }

  STRING_CONTENT_COMMON {
    ![\\'"$\r\n] |
    ESCAPE_SEQUENCE |
    '\\' ![nrbtvxu\r\n] |
    SIMPLE_STRING_INTERPOLATION
  }

  SIMPLE_STRING_INTERPOLATION {
    '$' (IDENTIFIER_NO_DOLLAR | BUILT_IN_IDENTIFIER | 'this')
  }

  STRING_CONTENT_SQ {
    STRING_CONTENT_COMMON | '"'
  }

  SINGLE_LINE_STRING_SQ_BEGIN_END {
    "'" STRING_CONTENT_SQ* "'"
  }

  SINGLE_LINE_STRING_SQ_BEGIN_MID {
    "'" STRING_CONTENT_SQ* '${'
  }

  SINGLE_LINE_STRING_SQ_MID_MID {
    '}' STRING_CONTENT_SQ* '${'
  }

  SINGLE_LINE_STRING_SQ_MID_END {
    '}' STRING_CONTENT_SQ* "'"
  }

  STRING_CONTENT_DQ {
    STRING_CONTENT_COMMON | "'"
  }

  SINGLE_LINE_STRING_DQ_BEGIN_END {
    '"' STRING_CONTENT_DQ* '"'
  }

  SINGLE_LINE_STRING_DQ_BEGIN_MID {
    '"' STRING_CONTENT_DQ* '${'
  }

  SINGLE_LINE_STRING_DQ_MID_MID {
    '}' STRING_CONTENT_DQ* '${'
  }

  SINGLE_LINE_STRING_DQ_MID_END {
    '}' STRING_CONTENT_DQ* '"'
  }

  RAW_MULTI_LINE_STRING {
    'r' "'''" _* "'''" |
    'r' '"""' _* '"""'
  }

  QUOTES_SQ {
    () | "'" | "''"
  }

  STRING_CONTENT_TSQ {
    QUOTES_SQ (STRING_CONTENT_COMMON | '"' | '\r' | '\n')
  }

  MULTI_LINE_STRING_SQ_BEGIN_END {
    "'''" STRING_CONTENT_TSQ* "'''"
  }

  MULTI_LINE_STRING_SQ_BEGIN_MID {
    "'''" STRING_CONTENT_TSQ* QUOTES_SQ '${'
  }

  MULTI_LINE_STRING_SQ_MID_MID {
    '}' STRING_CONTENT_TSQ* QUOTES_SQ '${'
  }

  MULTI_LINE_STRING_SQ_MID_END {
    '}' STRING_CONTENT_TSQ* "'''"
  }

  QUOTES_DQ {
    () | '"' | '""'
  }

  STRING_CONTENT_TDQ {
    QUOTES_DQ (STRING_CONTENT_COMMON | '\'' | '\r' | '\n')
  }

  MULTI_LINE_STRING_DQ_BEGIN_END {
    '"""' STRING_CONTENT_TDQ* '"""'
  }

  MULTI_LINE_STRING_DQ_BEGIN_MID {
    '"""' STRING_CONTENT_TDQ* QUOTES_DQ '${'
  }

  MULTI_LINE_STRING_DQ_MID_MID {
    '}' STRING_CONTENT_TDQ* QUOTES_DQ '${'
  }

  MULTI_LINE_STRING_DQ_MID_END {
    '}' STRING_CONTENT_TDQ* '"""'
  }

  @precedence { RAW_MULTI_LINE_STRING, RAW_SINGLE_LINE_STRING }

  IDENTIFIER_NO_DOLLAR {
    IDENTIFIER_START_NO_DOLLAR IDENTIFIER_PART_NO_DOLLAR*
  }

  IDENTIFIER_START_NO_DOLLAR {
    LETTER | '_'
  }

  IDENTIFIER_PART_NO_DOLLAR {
    IDENTIFIER_START_NO_DOLLAR | DIGIT
  }

  BUILT_IN_IDENTIFIER {
    'abstract' |
    'as' |
    'covariant' |
    'deferred' |
    'dynamic' |
    'export' |
    'external' |
    'extension' |
    'factory' |
    'Function' |
    'get' |
    'implements' |
    'import' |
    'interface' |
    'late' |
    'library' |
    'mixin' |
    'operator' |
    'part' |
    'required' |
    'set' |
    'static' |
    'typedef'
  }
}

@skip {
  WHITESPACE
}